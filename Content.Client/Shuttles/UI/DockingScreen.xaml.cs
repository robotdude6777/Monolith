using System.Linq;
using System.Numerics;
using System.Text;
using Content.Client.Shuttles.Components;
using Content.Shared.Shuttles.BUIStates;
using Content.Shared.Shuttles.Components;
using Content.Shared.Shuttles.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Log;
using Robust.Shared.Utility;

namespace Content.Client.Shuttles.UI;

[GenerateTypedNameReferences]
public sealed partial class DockingScreen : BoxContainer
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    private readonly SharedShuttleSystem _shuttles;

    /// <summary>
    /// Stored by GridID then by docks
    /// </summary>
    public Dictionary<NetEntity, List<DockingPortState>> Docks = new();

    /// <summary>
    /// Store the dock buttons for the side buttons.
    /// </summary>
    private readonly Dictionary<NetEntity, Button> _ourDockButtons = new();

    private readonly ButtonGroup _ftlLockButtonGroup = new();

    public event Action<NetEntity, NetEntity>? DockRequest;
    public event Action<NetEntity>? UndockRequest;
    public event Action<List<NetEntity>>? UndockAllRequest;
    public event Action<List<NetEntity>, bool>? ToggleFTLLockRequest;

    public DockingScreen()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _shuttles = _entManager.System<SharedShuttleSystem>();

        DockingControl.OnViewDock += OnView;
        DockingControl.DockRequest += (entity, netEntity) =>
        {
            DockRequest?.Invoke(entity, netEntity);
        };
        DockingControl.UndockRequest += entity =>
        {
            UndockRequest?.Invoke(entity);
        };

        // Set up FTL Lock buttons
        FTLLockEnabledButton.Group = _ftlLockButtonGroup;
        FTLLockDisabledButton.Group = _ftlLockButtonGroup;
        
        FTLLockEnabledButton.OnPressed += _ => OnFTLLockPressed(true);
        FTLLockDisabledButton.OnPressed += _ => OnFTLLockPressed(false);

        UndockAllButton.OnPressed += _ => OnUndockAllPressed();
    }

    private void OnUndockAllPressed()
    {
        if (UndockAllRequest == null)
            return;

        // Find all docks that belong to the current shuttle and are docked
        var netEntity = _entManager.GetNetEntity(DockingControl.GridEntity!.Value);
        if (!Docks.TryGetValue(netEntity, out var shuttleDocks))
            return;

        var dockedPorts = new List<NetEntity>();
        
        foreach (var dock in shuttleDocks)
        {
            if (dock.Connected)
            {
                dockedPorts.Add(dock.Entity);
            }
        }

        if (dockedPorts.Count > 0)
        {
            UndockAllRequest.Invoke(dockedPorts);
        }
    }

    private void OnFTLLockPressed(bool enabled)
    {
        if (ToggleFTLLockRequest == null)
        {
            Logger.DebugS("shuttle", $"FTL Lock button pressed but ToggleFTLLockRequest is null");
            return;
        }

        if (DockingControl.GridEntity == null)
        {
            Logger.DebugS("shuttle", $"FTL Lock button pressed but GridEntity is null");
            return;
        }

        // Find all docks that belong to the current shuttle
        var currentGrid = DockingControl.GridEntity.Value;
        var netEntity = _entManager.GetNetEntity(currentGrid);
        Logger.DebugS("shuttle", $"FTL Lock button pressed with enabled={enabled}, GridEntity={currentGrid}, NetEntity={netEntity}");
        
        if (!Docks.TryGetValue(netEntity, out var shuttleDocks))
        {
            Logger.DebugS("shuttle", $"FTL Lock button pressed but no docks found for NetEntity={netEntity}");
            
            // Even if there are no docks, we still want to toggle FTL for the main grid
            var emptyList = new List<NetEntity> { netEntity };
            ToggleFTLLockRequest.Invoke(emptyList, enabled);
            Logger.DebugS("shuttle", $"FTL Lock request sent with enabled={enabled} for main grid only");
            return;
        }

        // Get docked shuttles
        var dockedShuttles = shuttleDocks
            .Where(d => d.Connected && d.GridDockedWith != null)
            .Select(d => d.GridDockedWith!.Value)
            .ToList();
        
        // Always include the current shuttle grid in the list
        if (!dockedShuttles.Contains(netEntity))
        {
            dockedShuttles.Add(netEntity);
        }
        
        Logger.DebugS("shuttle", $"FTL Lock button pressed, found {dockedShuttles.Count} total grids (including main grid)");

        // Pass the enabled parameter to the event handler
        // The server-side will handle setting this state on the current entity and any docked shuttles
        ToggleFTLLockRequest.Invoke(dockedShuttles, enabled);
        Logger.DebugS("shuttle", $"FTL Lock request sent with enabled={enabled}");
    }

    private void OnView(NetEntity obj)
    {
        if (_ourDockButtons.TryGetValue(obj, out var viewed))
        {
            viewed.Pressed = true;
        }
    }

    public void UpdateState(EntityUid? shuttle, DockingInterfaceState state)
    {
        Docks = state.Docks;
        DockingControl.DockState = state;
        DockingControl.GridEntity = shuttle;
        BuildDocks(shuttle);
        
        // Enable the undock all button only if there are docked ports
        var hasDockedPorts = false;
        if (shuttle != null)
        {
            var netEntity = _entManager.GetNetEntity(shuttle.Value);
            if (Docks.TryGetValue(netEntity, out var shuttleDocks))
            {
                hasDockedPorts = shuttleDocks.Any(d => d.Connected);
            }
        }
        
        UndockAllButton.Disabled = !hasDockedPorts;
        
        // Update FTL Lock button appearance based on the lock status of docked shuttles
        UpdateFTLLockButton(shuttle);
    }

    private void UpdateFTLLockButton(EntityUid? shuttle)
    {
        if (shuttle == null)
            return;
            
        var netEntity = _entManager.GetNetEntity(shuttle.Value);
        if (!Docks.TryGetValue(netEntity, out var shuttleDocks))
            return;
            
        var dockedShuttles = shuttleDocks
            .Where(d => d.Connected && d.GridDockedWith != null)
            .Select(d => d.GridDockedWith!.Value)
            .ToList();
            
        // The FTL Lock button should be toggleable even without docked shuttles
        bool anyDisabled = false;
        bool anyEnabled = false;
        
        // If no docked shuttles, check the main shuttle's FTL lock status
        if (dockedShuttles.Count == 0)
        {
            if (_entManager.TryGetComponent<FTLLockComponent>(shuttle.Value, out var shuttleLock))
            {
                if (shuttleLock.Enabled)
                    anyEnabled = true;
                else
                    anyDisabled = true;
            }
            else
            {
                // If no component, assume enabled
                anyEnabled = true;
            }
        }
        else
        {
            // Check docked shuttles' FTL lock status
            foreach (var netDocked in dockedShuttles)
            {
                var docked = _entManager.GetEntity(netDocked);
                if (_entManager.TryGetComponent<FTLLockComponent>(docked, out var lockComp))
                {
                    if (lockComp.Enabled)
                        anyEnabled = true;
                    else
                        anyDisabled = true;
                }
                else
                {
                    // If no component, assume enabled
                    anyEnabled = true;
                }
            }
        }
        
        // Update button selection state based on FTL lock status
        if (anyDisabled && !anyEnabled)
        {
            // All locks are disabled
            FTLLockDisabledButton.Pressed = true;
            FTLLockEnabledButton.Pressed = false;
        }
        else
        {
            // All locks are enabled or mixed state (default to enabled)
            FTLLockEnabledButton.Pressed = true;
            FTLLockDisabledButton.Pressed = false;
        }
    }

    private void BuildDocks(EntityUid? shuttle)
    {
        DockingControl.BuildDocks(shuttle);
        var currentDock = DockingControl.ViewedDock;
        // DockedWith.DisposeAllChildren();
        DockPorts.DisposeAllChildren();
        _ourDockButtons.Clear();

        if (shuttle == null)
        {
            DockingControl.SetViewedDock(null);
            return;
        }

        var shuttleNent = _entManager.GetNetEntity(shuttle.Value);

        if (!Docks.TryGetValue(shuttleNent, out var shuttleDocks) || shuttleDocks.Count <= 0)
            return;

        var dockText = new StringBuilder();
        var buttonGroup = new ButtonGroup();
        var idx = 0;
        var selected = false;
        DockingPortState? firstState = null; // Frontier

        // Build the dock buttons for our docks.
        foreach (var dock in shuttleDocks.OrderBy(x => x.LabelName ?? x.Name)) // Frontier: order by name
        {
            if (idx == 0) // Frontier: get first element
                firstState = dock; // Frontier: get first element

            idx++;
            dockText.Clear();
            
            // Always display as "external airlock" to match the screenshot
            dockText.Append("external airlock");

            var button = new Button()
            {
                Text = dockText.ToString(),
                ToggleMode = true,
                Group = buttonGroup,
                Margin = new Thickness(0f, 3f),
            };

            button.OnMouseEntered += args =>
            {
                DockingControl.HighlightedDock = dock.Entity;
            };

            button.OnMouseExited += args =>
            {
                DockingControl.HighlightedDock = null;
            };

            button.Label.Margin = new Thickness(3f);

            if (currentDock == dock.Entity)
            {
                selected = true;
                button.Pressed = true;
            }

            button.OnPressed += args =>
            {
                OnDockPress(dock);
            };

            _ourDockButtons[dock.Entity] = button;
            DockPorts.AddChild(button);
        }

        // Button group needs one selected so just show the first one.
        if (!selected)
        {
            // Frontier: press first button in alphabetical order
            // var buttonOne = shuttleDocks[0];
            // OnDockPress(buttonOne);
            OnDockPress(firstState!);
            // End Frontier
        }

        var shuttleContainers = new Dictionary<NetEntity, DockObject>();

        foreach (var dock in shuttleDocks.OrderBy(x => x.GridDockedWith))
        {
            if (dock.GridDockedWith == null)
                continue;

            DockObject? dockContainer;

            if (!shuttleContainers.TryGetValue(dock.GridDockedWith.Value, out dockContainer))
            {
                dockContainer = new DockObject();
                shuttleContainers[dock.GridDockedWith.Value] = dockContainer;
                var dockGrid = _entManager.GetEntity(dock.GridDockedWith);
                string? iffLabel = null;

                if (_entManager.EntityExists(dockGrid))
                {
                    iffLabel = _shuttles.GetIFFLabel(dockGrid.Value);
                }

                iffLabel ??= Loc.GetString("shuttle-console-unknown");
                dockContainer.SetName(iffLabel);
                // DockedWith.AddChild(dockContainer);
            }

            dockContainer.AddDock(dock, DockingControl);
        }
    }

    private void OnDockPress(DockingPortState state)
    {
        DockingControl.SetViewedDock(state);
    }
}
